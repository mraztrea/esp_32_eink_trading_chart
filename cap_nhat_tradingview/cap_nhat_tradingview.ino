#include <GxEPD2_3C.h>
#include <Fonts/FreeSans12pt7b.h>
#include <Fonts/FreeSans9pt7b.h>
#include <SPI.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <Preferences.h>

// Wi-Fi & API
struct WiFiNetwork {
    const char* ssid;
    const char* password;
};

const WiFiNetwork networks[] = {
    // {"Z117_3", "chiquynhbo"},
    {"thanhhome", "quynhmiu"},
    {"HRI", "hri@1008"}
};
const int networkCount = sizeof(networks) / sizeof(networks[0]);
const char *baseUrl = "https://xehoi.pro/chart.php?symbol=";

// Chart symbols
const char *symbols[] = {"BTCUSDT"};
const char *intervals[] = {"1h", "1d", "1w"};
const int symbolCount = sizeof(symbols) / sizeof(symbols[0]);
const int intervalCount = sizeof(intervals) / sizeof(intervals[0]);

Preferences prefs;
String updateTime = ""; // Th√™m bi·∫øn l∆∞u th·ªùi gian c·∫≠p nh·∫≠t

struct Candle
{
  float open, high, low, close;
};

#define CS 15
#define DC 27
#define RST 26
#define BUSY 25

GxEPD2_3C<GxEPD2_420_Z98c, GxEPD2_420_Z98c::HEIGHT> display(
    GxEPD2_420_Z98c(CS, DC, RST, BUSY));

const int maxCandles = 50;
Candle candles[maxCandles];
int candleCount = 0;
char symbol[10];
char interval[5];
float priceMax = 0;
float priceMin = 999999;
float lastPrice = 0;
bool fetchFailed = false; // Bi·∫øn ƒë√°nh d·∫•u th·∫•t b·∫°i khi fetchChartData

bool connectToAvailableWiFi() {
  int networksFound = WiFi.scanNetworks();
  Serial.println("Qu√©t t√¨m m·∫°ng WiFi...");
  
  if (networksFound == 0) {
    Serial.println("Kh√¥ng t√¨m th·∫•y m·∫°ng WiFi n√†o");
    return false;
  }

  // Ki·ªÉm tra t·ª´ng m·∫°ng ƒë√£ qu√©t ƒë∆∞·ª£c
  for (int i = 0; i < networksFound; i++) {
    String scannedSSID = WiFi.SSID(i);
    
    // So s√°nh v·ªõi danh s√°ch m·∫°ng ƒë√£ c·∫•u h√¨nh
    for (int j = 0; j < networkCount; j++) {
      if (scannedSSID.equals(networks[j].ssid)) {
        Serial.printf("Th·ª≠ k·∫øt n·ªëi ƒë·∫øn %s\n", networks[j].ssid);
        
        WiFi.begin(networks[j].ssid, networks[j].password);
        
        // Ch·ªù k·∫øt n·ªëi trong 10 gi√¢y
        int attempts = 0;
        while (WiFi.status() != WL_CONNECTED && attempts < 20) {
          delay(500);
          Serial.print(".");
          attempts++;
        }
        
        if (WiFi.status() == WL_CONNECTED) {
          Serial.printf("\nƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn %s\n", networks[j].ssid);
          return true;
        }
        
        Serial.println("\nK·∫øt n·ªëi th·∫•t b·∫°i, th·ª≠ m·∫°ng ti·∫øp theo");
        WiFi.disconnect();
      }
    }
  }
  
  Serial.println("Kh√¥ng t√¨m th·∫•y m·∫°ng WiFi kh·∫£ d·ª•ng n√†o trong danh s√°ch");
  return false;
}

void setup()
{
  Serial.begin(115200);
  delay(300);
  SPI.begin(13, -1, 14, 15);
  display.init();

  // Wakeup by timer or BOOT
  esp_sleep_enable_ext0_wakeup(GPIO_NUM_0, 0);         // BOOT button
  esp_sleep_enable_timer_wakeup(15 * 60 * 1000000ULL); // 15 ph√∫t

  // ƒê·ªçc index t·ª´ b·ªô nh·ªõ
  prefs.begin("chart", false);
  int symbolIndex = prefs.getInt("symbolIndex", 0);
  int intervalIndex = prefs.getInt("intervalIndex", 0);
  fetchFailed = prefs.getBool("fetchFailed", false); // ƒê·ªçc tr·∫°ng th√°i th·∫•t b·∫°i t·ª´ l·∫ßn tr∆∞·ªõc

  // N·∫øu wake t·ª´ n√∫t ‚Üí thay ƒë·ªïi interval n·∫øu l·∫ßn tr∆∞·ªõc kh√¥ng th·∫•t b·∫°i
  if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_EXT0)
  {
    if (!fetchFailed) {
      // Ch·ªâ thay ƒë·ªïi interval n·∫øu l·∫ßn tr∆∞·ªõc kh√¥ng th·∫•t b·∫°i
      intervalIndex = (intervalIndex + 1) % intervalCount;
    } else {
      Serial.println("L·∫ßn tr∆∞·ªõc fetch th·∫•t b·∫°i, kh√¥ng thay ƒë·ªïi interval");
    }
  }

  prefs.putInt("symbolIndex", symbolIndex);
  prefs.putInt("intervalIndex", intervalIndex);
  prefs.putBool("fetchFailed", false); // Reset tr·∫°ng th√°i th·∫•t b·∫°i tr∆∞·ªõc khi fetch m·ªõi
  prefs.end();

  strcpy(symbol, symbols[symbolIndex]);
  strcpy(interval, intervals[intervalIndex]);
  Serial.printf("üñº Hi·ªÉn th·ªã chart: %s (%s)\n", symbol, interval);

  // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang k·∫øt n·ªëi WiFi
  showLoadingMessage(symbol, interval, "Dang quet WiFi...", "", "");

  if (!connectToAvailableWiFi()) {
    showLoadingMessage(symbol, interval, "Khong tim thay WiFi", "Vui long kiem tra lai", "");
    delay(5000);
    esp_deep_sleep_start();
    return;
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i d·ªØ li·ªáu v·ªõi th√¥ng tin WiFi
  String status = "Da ket noi WiFi";
  String ssidInfo = "SSID: " + WiFi.SSID();
  String ipInfo = "IP: " + WiFi.localIP().toString();
  showLoadingMessage(symbol, interval, "Dang tai du lieu moi...", status, ssidInfo, ipInfo);

  fetchChartData();
  drawChart(symbol, interval, lastPrice, priceMin, priceMax, candles, candleCount);

  Serial.println("üí§ V√†o deep sleep...");
  delay(100);
  esp_deep_sleep_start();
}

void loop() {}

bool tryFetchChartData(int retryCount) {
  String url = String(baseUrl) + symbol + "&interval=" + interval + "&limit=31";
  HTTPClient http;
  http.begin(url);
  int httpCode = http.GET();
  
  Serial.printf("L·∫ßn th·ª≠ %d: HTTP code %d\n", retryCount + 1, httpCode);
  
  if (httpCode == 200) {
    String payload = http.getString();
    StaticJsonDocument<8192> doc;
    if (deserializeJson(doc, payload)) {
      Serial.println("L·ªói parse JSON");
      http.end();
      return false;
    }

    lastPrice = doc["lp"];
    priceMax = doc["hi"];
    priceMin = doc["lo"];
    updateTime = doc["time"].as<String>(); // ƒê·ªçc th·ªùi gian c·∫≠p nh·∫≠t

    JsonArray arr = doc["c"];
    candleCount = min((int)arr.size(), maxCandles);

    for (int i = 0; i < candleCount; i++) {
      JsonArray row = arr[i];
      candles[i].open = row[0];
      candles[i].high = row[1];
      candles[i].low = row[2];
      candles[i].close = row[3];
    }
    
    http.end();
    return true;
  }
  
  http.end();
  return false;
}

void fetchChartData()
{
  fetchFailed = true; // M·∫∑c ƒë·ªãnh l√† th·∫•t b·∫°i, ch·ªâ ƒë·ªïi khi th√†nh c√¥ng
  
  // Th·ª≠ t·ªëi ƒëa 3 l·∫ßn
  const int maxRetries = 3;
  bool success = false;
  
  for (int i = 0; i < maxRetries; i++) {
    success = tryFetchChartData(i);
    if (success) {
      // N·∫øu th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p
      break;
    }
    
    if (i < maxRetries - 1) {
      // Ch·ªâ delay gi·ªØa c√°c l·∫ßn th·ª≠, kh√¥ng ph·∫£i l·∫ßn cu·ªëi
      Serial.printf("Th·ª≠ l·∫°i l·∫ßn %d sau 1 gi√¢y...\n", i + 2);
      delay(1000); // Delay 1 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
    }
  }
  
  // C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† l∆∞u v√†o b·ªô nh·ªõ
  fetchFailed = !success;
  prefs.begin("chart", false);
  prefs.putBool("fetchFailed", fetchFailed);
  prefs.end();
  
  if (success) {
    Serial.println("Fetch d·ªØ li·ªáu th√†nh c√¥ng!");
  } else {
    Serial.println("Fetch d·ªØ li·ªáu th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠!");
  }
}

void showLoadingMessage(const char *symbol, const char *interval, const String &message,
                        const String &wifiStatus, const String &ssidInfo, const String &ipInfo)
{
  display.setFullWindow();
  display.firstPage();
  do
  {
    display.fillScreen(GxEPD_WHITE);
    display.setTextColor(GxEPD_BLACK);
    display.setFont(&FreeSans9pt7b);

    // Ti√™u ƒë·ªÅ
    display.setCursor(10, 20);
    display.print(symbol);
    display.setCursor(120, 20);
    display.print(interval);

    // Th√¥ng b√°o ƒëang t·∫£i
    display.setCursor(10, 100);
    display.print(message);
    display.setCursor(10, 130);
    display.print("Vui long doi trong giay lat...");

    // Th√¥ng tin WiFi
    if (wifiStatus != "")
    {
      display.setCursor(10, 160);
      display.print(wifiStatus);
    }

    if (ssidInfo != "")
    {
      display.setCursor(10, 190);
      display.print(ssidInfo);
    }

    if (ipInfo != "")
    {
      display.setCursor(10, 220);
      display.print(ipInfo);
    }

  } while (display.nextPage());
}

// Overload ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi code c≈©
void showLoadingMessage(const char *symbol, const char *interval, const String &message,
                        const String &wifiStatus, const String &ssidInfo)
{
  showLoadingMessage(symbol, interval, message, wifiStatus, ssidInfo, "");
}

void drawChart(const char *symbol, const char *interval, float lastPrice, float priceMin, float priceMax, Candle candles[], int count)
{
  display.setFullWindow();
  display.firstPage();
  do
  {
    display.fillScreen(GxEPD_WHITE);
    display.setTextColor(GxEPD_BLACK);
    display.setFont(&FreeSans9pt7b);

    // Header
    display.setCursor(10, 20);
    display.print(symbol);
    display.setCursor(120, 20);
    display.print(interval);
    display.setCursor(250, 20);
    display.printf("Last: %.1f", lastPrice);

    // Chart area
    int chartX = 30, chartY = 30, chartW = 320, chartH = 230;
    float priceRange = priceMax - priceMin;
    int candleWidth = 6;

    for (int i = 0; i < count; i++)
    {
      int x = chartX + i * (candleWidth + 4);
      int yHigh = chartY + chartH - ((candles[i].high - priceMin) / priceRange * chartH);
      int yLow = chartY + chartH - ((candles[i].low - priceMin) / priceRange * chartH);
      int yOpen = chartY + chartH - ((candles[i].open - priceMin) / priceRange * chartH);
      int yClose = chartY + chartH - ((candles[i].close - priceMin) / priceRange * chartH);

      display.drawLine(x + candleWidth / 2, yHigh, x + candleWidth / 2, yLow, GxEPD_BLACK);
      int yTop = min(yOpen, yClose);
      int yBot = max(yOpen, yClose);
      if (candles[i].close >= candles[i].open)
      {
        display.fillRect(x, yTop, candleWidth, yBot - yTop, GxEPD_WHITE);
        display.drawRect(x, yTop, candleWidth, yBot - yTop, GxEPD_BLACK);
      }
      else
      {
        display.fillRect(x, yTop, candleWidth, yBot - yTop, GxEPD_BLACK);
      }
    }

    // C·ªôt gi√° b√™n ph·∫£i
    int labelX = 360;
    display.setFont(&FreeSans9pt7b);
    for (int i = 0; i <= 5; i++)
    {
      float val = priceMax - i * (priceRange / 5);
      int y = chartY + i * (chartH / 5) + 5;
      display.setCursor(labelX, y);
      display.print((int)val);
    }

    // ƒê∆∞·ªùng gi√≥ng + √¥ gi√° hi·ªán t·∫°i
    int yLast = chartY + chartH - ((lastPrice - priceMin) / priceRange * chartH);
    for (int x = chartX; x < chartX + chartW; x += 6)
    {
      display.drawLine(x, yLast, x + 3, yLast, GxEPD_BLACK);
    }
    display.fillRect(labelX - 5, yLast - 10, 45, 20, GxEPD_BLACK);
    display.setCursor(labelX, yLast + 5);
    display.setTextColor(GxEPD_WHITE);
    display.print((int)lastPrice);
    display.setTextColor(GxEPD_BLACK); // kh√¥i ph·ª•c

    // Hi·ªÉn th·ªã th·ªùi gian c·∫≠p nh·∫≠t
    display.setFont(&FreeSans9pt7b);
    display.setCursor(240, 280);
    display.print(updateTime);

  } while (display.nextPage());
}
